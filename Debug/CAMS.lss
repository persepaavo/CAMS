
CAMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  0000021c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005d6  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002d5  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbb  00000000  00000000  00000bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fdf0  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000393  00000000  00000000  00011778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00011b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003c4b  00000000  00000000  00011b63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__vector_11>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 31       	cpi	r26, 0x17	; 23
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	8b d0       	rcall	.+278    	; 0x19c <main>
  86:	8e c0       	rjmp	.+284    	; 0x1a4 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <__vector_11>:
	_sched_tasks[index].hour = hour;
	_sched_tasks[index].minutes = minutes;
	TIMSK1 |= _BV(OCIE1A);
}

ISR(TIMER1_COMPA_vect) {
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	3f 93       	push	r19
  98:	4f 93       	push	r20
  9a:	5f 93       	push	r21
  9c:	6f 93       	push	r22
  9e:	7f 93       	push	r23
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	af 93       	push	r26
  a6:	bf 93       	push	r27
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
	int16_t index;
	volatile struct _sched_task_t *task;

	_sched_seconds += 1;
  b0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_sched_seconds>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_sched_seconds>
	if (_sched_seconds == 60) {
  ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_sched_seconds>
  be:	8c 33       	cpi	r24, 0x3C	; 60
  c0:	09 f0       	breq	.+2      	; 0xc4 <__vector_11+0x3a>
  c2:	50 c0       	rjmp	.+160    	; 0x164 <__vector_11+0xda>
		_sched_seconds = 0;
  c4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_sched_seconds>
		_sched_minutes++;
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (_sched_minutes == 60) {
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	8c 33       	cpi	r24, 0x3C	; 60
  d8:	09 f0       	breq	.+2      	; 0xdc <__vector_11+0x52>
  da:	41 c0       	rjmp	.+130    	; 0x15e <__vector_11+0xd4>
			_sched_minutes = 0;
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			_sched_hours++;
  e0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_sched_hours>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_sched_hours>
			if (_sched_hours == 24)
  ea:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_sched_hours>
  ee:	88 31       	cpi	r24, 0x18	; 24
  f0:	b1 f5       	brne	.+108    	; 0x15e <__vector_11+0xd4>
			_sched_hours = 0;
  f2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_sched_hours>
  f6:	33 c0       	rjmp	.+102    	; 0x15e <__vector_11+0xd4>
		}
		for(index=0; index<SCHEDULER_MAX_TASKS; index++) {
			task = &_sched_tasks[index];
			if ((task->task != NULL) && (task->hour == _sched_hours) && (task->minutes == _sched_minutes))
  f8:	fe 01       	movw	r30, r28
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	ef 5f       	subi	r30, 0xFF	; 255
 104:	fe 4f       	sbci	r31, 0xFE	; 254
 106:	82 81       	ldd	r24, Z+2	; 0x02
 108:	93 81       	ldd	r25, Z+3	; 0x03
 10a:	89 2b       	or	r24, r25
 10c:	19 f1       	breq	.+70     	; 0x154 <__vector_11+0xca>
 10e:	fe 01       	movw	r30, r28
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	ef 5f       	subi	r30, 0xFF	; 255
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	90 81       	ld	r25, Z
 11e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_sched_hours>
 122:	98 13       	cpse	r25, r24
 124:	17 c0       	rjmp	.+46     	; 0x154 <__vector_11+0xca>
 126:	fe 01       	movw	r30, r28
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ef 5f       	subi	r30, 0xFF	; 255
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	91 81       	ldd	r25, Z+1	; 0x01
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	98 13       	cpse	r25, r24
 13c:	0b c0       	rjmp	.+22     	; 0x154 <__vector_11+0xca>
			task->task();
 13e:	fe 01       	movw	r30, r28
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	ef 5f       	subi	r30, 0xFF	; 255
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	02 80       	ldd	r0, Z+2	; 0x02
 14e:	f3 81       	ldd	r31, Z+3	; 0x03
 150:	e0 2d       	mov	r30, r0
 152:	09 95       	icall
			_sched_minutes = 0;
			_sched_hours++;
			if (_sched_hours == 24)
			_sched_hours = 0;
		}
		for(index=0; index<SCHEDULER_MAX_TASKS; index++) {
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	c5 30       	cpi	r28, 0x05	; 5
 158:	d1 05       	cpc	r29, r1
 15a:	71 f6       	brne	.-100    	; 0xf8 <__vector_11+0x6e>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <__vector_11+0xda>
	_sched_tasks[index].hour = hour;
	_sched_tasks[index].minutes = minutes;
	TIMSK1 |= _BV(OCIE1A);
}

ISR(TIMER1_COMPA_vect) {
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
 162:	ca cf       	rjmp	.-108    	; 0xf8 <__vector_11+0x6e>
			task = &_sched_tasks[index];
			if ((task->task != NULL) && (task->hour == _sched_hours) && (task->minutes == _sched_minutes))
			task->task();
		}
	}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 18a:	95 b1       	in	r25, 0x05	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	80 62       	ori	r24, 0x20	; 32
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 190:	8f 77       	andi	r24, 0x7F	; 127
 192:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 194:	89 2f       	mov	r24, r25
 196:	80 6a       	ori	r24, 0xA0	; 160
 198:	85 b9       	out	0x05, r24	; 5
 19a:	08 95       	ret

0000019c <main>:
#include "scheduler.h"
int main (void)
{
	/* Insert  system clock initialization code here (sysclk_init()). */

	board_init();
 19c:	f6 df       	rcall	.-20     	; 0x18a <board_init>

	/* Insert application code here, after the board has been initialized. */
}
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
