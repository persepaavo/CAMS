
CAMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  000002e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000061d  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000364  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf8  00000000  00000000  00000d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000105a9  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b5  00000000  00000000  00012109  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000123be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003fdf  00000000  00000000  00012416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	83 c0       	rjmp	.+262    	; 0x138 <__vector_12>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 31       	cpi	r26, 0x17	; 23
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	bc d0       	rcall	.+376    	; 0x222 <main>
  aa:	df c0       	rjmp	.+446    	; 0x26a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <scheduler_init>:
volatile struct _sched_task_t _sched_tasks[SCHEDULER_MAX_TASKS];

void scheduler_init(void) {
	//int16_t index;
	
	_sched_minutes = 0;
  ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	_sched_seconds = 0;
  b2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_sched_seconds>

	
	
	TCCR1A = 0;
  b6:	1f bc       	out	0x2f, r1	; 47
	TCNT1=0;
  b8:	1d bc       	out	0x2d, r1	; 45
  ba:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 24999;
  bc:	87 ea       	ldi	r24, 0xA7	; 167
  be:	91 e6       	ldi	r25, 0x61	; 97
  c0:	9b bd       	out	0x2b, r25	; 43
  c2:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << WGM12)|(1 << CS12);
  c4:	8e b5       	in	r24, 0x2e	; 46
  c6:	8c 60       	ori	r24, 0x0C	; 12
  c8:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
  ca:	87 b7       	in	r24, 0x37	; 55
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	87 bf       	out	0x37, r24	; 55
  d0:	08 95       	ret

000000d2 <task_add>:
	int16_t index;
	volatile struct _sched_task_t *task;
	task = &_sched_tasks[0];
	for(index=0; index<SCHEDULER_MAX_TASKS; index++) {
		task = &_sched_tasks[index];
		if (task->task == NULL) {
  d2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <_sched_tasks+0x2>
  d6:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <_sched_tasks+0x3>
  da:	23 2b       	or	r18, r19
  dc:	79 f0       	breq	.+30     	; 0xfc <task_add+0x2a>
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ef 5f       	subi	r30, 0xFF	; 255
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	02 80       	ldd	r0, Z+2	; 0x02
  f2:	f3 81       	ldd	r31, Z+3	; 0x03
  f4:	e0 2d       	mov	r30, r0
  f6:	ef 2b       	or	r30, r31
  f8:	b9 f4       	brne	.+46     	; 0x128 <task_add+0x56>
  fa:	02 c0       	rjmp	.+4      	; 0x100 <task_add+0x2e>

int16_t task_add(uint8_t minutes, uint8_t seconds, void (*f)()) {
	int16_t index;
	volatile struct _sched_task_t *task;
	task = &_sched_tasks[0];
	for(index=0; index<SCHEDULER_MAX_TASKS; index++) {
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
		task = &_sched_tasks[index];
		if (task->task == NULL) {
			TIMSK &= ~(_BV(OCIE1A));
 100:	97 b7       	in	r25, 0x37	; 55
 102:	9f 7e       	andi	r25, 0xEF	; 239
 104:	97 bf       	out	0x37, r25	; 55
			task->minutes = minutes;
 106:	f9 01       	movw	r30, r18
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	ef 5f       	subi	r30, 0xFF	; 255
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	80 83       	st	Z, r24
			task->seconds = seconds;
 116:	61 83       	std	Z+1, r22	; 0x01
			task->task = f;
 118:	53 83       	std	Z+3, r21	; 0x03
 11a:	42 83       	std	Z+2, r20	; 0x02
			TIMSK |= _BV(OCIE1A);
 11c:	87 b7       	in	r24, 0x37	; 55
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	87 bf       	out	0x37, r24	; 55
			return index;
 122:	82 2f       	mov	r24, r18
 124:	93 2f       	mov	r25, r19
 126:	08 95       	ret

int16_t task_add(uint8_t minutes, uint8_t seconds, void (*f)()) {
	int16_t index;
	volatile struct _sched_task_t *task;
	task = &_sched_tasks[0];
	for(index=0; index<SCHEDULER_MAX_TASKS; index++) {
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	25 30       	cpi	r18, 0x05	; 5
 12e:	31 05       	cpc	r19, r1
 130:	c1 f6       	brne	.-80     	; 0xe2 <task_add+0x10>
			task->task = f;
			TIMSK |= _BV(OCIE1A);
			return index;
		}
	}
	return -1;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	9f ef       	ldi	r25, 0xFF	; 255
}
 136:	08 95       	ret

00000138 <__vector_12>:

ISR(TIMER1_COMPA_vect) {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	int16_t index;
	volatile struct _sched_task_t *task;
	
	_sched_seconds += 1;
 15e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_sched_seconds>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_sched_seconds>
	if (_sched_seconds == 60) {
 168:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_sched_seconds>
 16c:	8c 33       	cpi	r24, 0x3C	; 60
 16e:	59 f5       	brne	.+86     	; 0x1c6 <__vector_12+0x8e>
		_sched_seconds = 0;
 170:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <_sched_seconds>
 174:	28 c0       	rjmp	.+80     	; 0x1c6 <__vector_12+0x8e>


			
		for(index=0; index<SCHEDULER_MAX_TASKS; index++) {
			task = &_sched_tasks[index];
			if ((task->task != NULL)  && ( _sched_seconds % task->seconds == 0))
 176:	fe 01       	movw	r30, r28
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ef 5f       	subi	r30, 0xFF	; 255
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	82 81       	ldd	r24, Z+2	; 0x02
 186:	93 81       	ldd	r25, Z+3	; 0x03
 188:	89 2b       	or	r24, r25
 18a:	c1 f0       	breq	.+48     	; 0x1bc <__vector_12+0x84>
 18c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_sched_seconds>
 190:	fe 01       	movw	r30, r28
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	ef 5f       	subi	r30, 0xFF	; 255
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	61 81       	ldd	r22, Z+1	; 0x01
 1a0:	58 d0       	rcall	.+176    	; 0x252 <__udivmodqi4>
 1a2:	91 11       	cpse	r25, r1
 1a4:	0b c0       	rjmp	.+22     	; 0x1bc <__vector_12+0x84>
				//if (b == 0)
				//{
			//		b = 1;
				{
					//TIMSK &= ~(_BV(OCIE1A));
					task->task();
 1a6:	fe 01       	movw	r30, r28
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ef 5f       	subi	r30, 0xFF	; 255
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	02 80       	ldd	r0, Z+2	; 0x02
 1b6:	f3 81       	ldd	r31, Z+3	; 0x03
 1b8:	e0 2d       	mov	r30, r0
 1ba:	09 95       	icall
		}
	


			
		for(index=0; index<SCHEDULER_MAX_TASKS; index++) {
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	c5 30       	cpi	r28, 0x05	; 5
 1c0:	d1 05       	cpc	r29, r1
 1c2:	c9 f6       	brne	.-78     	; 0x176 <__vector_12+0x3e>
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <__vector_12+0x94>
		}
	}
	return -1;
}

ISR(TIMER1_COMPA_vect) {
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	d5 cf       	rjmp	.-86     	; 0x176 <__vector_12+0x3e>
				}
			//	}
			//b = 0;
					
		}
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 1f2:	95 b1       	in	r25, 0x05	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	80 62       	ori	r24, 0x20	; 32
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 1fc:	89 2f       	mov	r24, r25
 1fe:	80 6a       	ori	r24, 0xA0	; 160
 200:	85 b9       	out	0x05, r24	; 5
 202:	08 95       	ret

00000204 <task1>:
#include <util/delay.h>
#include "scheduler.h"

void task1(void)
{
	PORTB ^= 0x01;
 204:	98 b3       	in	r25, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	89 27       	eor	r24, r25
 20a:	88 bb       	out	0x18, r24	; 24
 20c:	08 95       	ret

0000020e <task2>:

}

void task2(void)
{	
	PORTB ^= 0x02;
 20e:	98 b3       	in	r25, 0x18	; 24
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	89 27       	eor	r24, r25
 214:	88 bb       	out	0x18, r24	; 24
 216:	08 95       	ret

00000218 <task3>:
	
}
void task3(void)
{
	PORTB ^= 0x04;
 218:	98 b3       	in	r25, 0x18	; 24
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	89 27       	eor	r24, r25
 21e:	88 bb       	out	0x18, r24	; 24
 220:	08 95       	ret

00000222 <main>:
}

int main (void)
{
	PORTB =0xff;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	88 bb       	out	0x18, r24	; 24

	
	DDRB ^= 0xff;
 226:	87 b3       	in	r24, 0x17	; 23
 228:	80 95       	com	r24
 22a:	87 bb       	out	0x17, r24	; 23

	board_init();
 22c:	e2 df       	rcall	.-60     	; 0x1f2 <board_init>
	task_add(0,2,task1);
 22e:	42 e0       	ldi	r20, 0x02	; 2
 230:	51 e0       	ldi	r21, 0x01	; 1
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	4d df       	rcall	.-358    	; 0xd2 <task_add>
	task_add(0,4,task2);
 238:	47 e0       	ldi	r20, 0x07	; 7
 23a:	51 e0       	ldi	r21, 0x01	; 1
 23c:	64 e0       	ldi	r22, 0x04	; 4
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	48 df       	rcall	.-368    	; 0xd2 <task_add>
	task_add(0,8,task3);
 242:	4c e0       	ldi	r20, 0x0C	; 12
 244:	51 e0       	ldi	r21, 0x01	; 1
 246:	68 e0       	ldi	r22, 0x08	; 8
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	43 df       	rcall	.-378    	; 0xd2 <task_add>
	scheduler_init();
 24c:	30 df       	rcall	.-416    	; 0xae <scheduler_init>
	sei();
 24e:	78 94       	sei
	while(1) 
	{

	}
 250:	ff cf       	rjmp	.-2      	; 0x250 <main+0x2e>

00000252 <__udivmodqi4>:
 252:	99 1b       	sub	r25, r25
 254:	79 e0       	ldi	r23, 0x09	; 9
 256:	04 c0       	rjmp	.+8      	; 0x260 <__udivmodqi4_ep>

00000258 <__udivmodqi4_loop>:
 258:	99 1f       	adc	r25, r25
 25a:	96 17       	cp	r25, r22
 25c:	08 f0       	brcs	.+2      	; 0x260 <__udivmodqi4_ep>
 25e:	96 1b       	sub	r25, r22

00000260 <__udivmodqi4_ep>:
 260:	88 1f       	adc	r24, r24
 262:	7a 95       	dec	r23
 264:	c9 f7       	brne	.-14     	; 0x258 <__udivmodqi4_loop>
 266:	80 95       	com	r24
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
